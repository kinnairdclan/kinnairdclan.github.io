---
layout: post
title:  "Ruby 1-2: Better Than a Journo Can Do"
date:   2021-12-17 00:05:00 -0700
categories: Warm-Up
---
Ever since the 2008 recession, journalists were feeling ever-so-helpful in explaining that workers in 'outmoded' industries could learn to code. With layoffs at many online publications like Huffpost and Buzzfeed in later years, these unemployed journalists' Twitter feeds were filled with brilliant albeit mocking suggestions that these journalists learn to code. The gammas couldn't handle it and complained so much Twitter began to consider the suggestion as grounds for a banning. Go figure.

Well, here you are. You're learning to code. And with that you're already miles ahead of anyone who purports to understand what you need or want to do to support yourself or your family. And I'm glad to have you with me. Now let's learn some Ruby.

Learn Ruby the Hard Way
---
Our section on learning Ruby is going to draw a lot from Zed Shaw's [Learn Ruby the Hard Way][lrthw]. You can consider it the "textbook" for our course. It offers a good balance of repitition and essential skills to make us proficient and pragmatic Ruby coders in no time. Once we have a grasp of Ruby fundamentals we will then move on to more complex uses of Ruby.

For today's warmup read and complete the study drills of **exercises 1-3** of [Learn Ruby the Hard Way][lrthw]. You can access the entirety of this book online for free. Alternatively you can support Shaw and buy his full PDF and videos. We're skipping Exercise 0 because our development environment work is already taken care of. 

Shaw has you write scripts that you run as programs, which is a much better way to learn programming as compared to others I've seen. I recommend you write your scripts with the command `gedit`, such as running `gedit ex1.rb` for the first exercise. The text editor then opens up and you can type into it normally, save normally, and exit normally. You then run the scripts you make by running `ruby ex1.rb`. 

The Extra Mile (Optional)
---

This next portion is optional. If you can, after you've written your scripts copy them to a new file using `cp` and format the new file as a Jekyll post for your coding blog. To do this, make your new file look like:

{% highlight md %}
---
layout: post
title:  "Learn Ruby the Hard Way Exercise 1"
date:   2021-12-17 00:05:00 -0700 #This can be today's date, it doesn't really matter what day/time you give it.
categories: jekyll update
---
```
puts "Hello World!"
puts "Hello Again"
puts "I like typing this."
puts "This is fun."
puts "Yay! Printing."
puts "I'd much rather you 'not'."
puts 'I "said" do not touch this.'
```
{% endhighlight %}

Once you have this file written out place it (using `cp` or `mv`) in your Jekyll repository in the following format:

```
mygithubusername.github.io/
|
\'_posts'/
  |
  \_2021-12-17-exercise1.markdown <--- this is the file above
  |
  \_(exercises 2, 3 as seperate posts)
```

Note the date names of the `.markdown` files can reflect the actual date you completed them, not the dates given above.

You can then test out your new pages by running `jekyll serve` in the root directory of your Jekyll blog repo. The new exercise posts should propagate as new links in your main page, and the links should take you to your completed scripts in all their glory! Note these script pages will not be runnable as Ruby any more but viewable in your blogs--markdown is not the same thing as Ruby.

Source control your new `_posts` with `git add`, `git commit` commands. A lot just happened, it's OK if you get stuck. Reach out to me if you are, and we can work through `git` issues. Alternatively wait for the beginning of class and we can work through this warm up together. Happy blogging and see you next class!

[lrthw]: https://learnrubythehardway.org/book/
