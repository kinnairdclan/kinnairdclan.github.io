---
layout: post
title:  "Ruby 1-7: Growing Branches (of code)"
date:   2022-01-11 00:05:00 -0700
categories: Warm-Up
---

In the past two weeks we've had our Homework and dove into boolean logic. Boolean logic is something I want us to get down pat, so for today's warm-up read and complete **Excercise 28: Boolean Practice** in Shaw. The exercise asks that you look at a series of boolean statements and try to determine what the outcome will be before testing each statement out. I would recommend after making your "prediction" that you test each statment out in `irb`.

If some of the longer statements frustrate you, check out Shaw's technique lower down in the exercise to simplify the statements before evaluating them. This technique is invaluable even for veteran programmers. Oftentimes boolean logic seems simple to start with, but can get out of hand if we aren't careful!

You can skip the study drills for this exercise as they are a bit weird. Instead, after the exercise, write out a few **pseudocode scripts** using some boolean operators. 

What is *pseudocode*? It is code that we write that doesn't need to actually be runnable in `ruby` or `irb`, but should at least follow the `ruby` syntax and demonstrate understanding of the concepts we are trying to grasp. It doesn't need to be complete code-wise but should demonstrate the boolean logic principles and `if`-statements we are learning. To give an example:

{% highlight ruby %}
if have_keys && have_wallet
  get_in_car_and_leave()
elsif have_keys
  search_for_wallet()
elsif have_wallet
  search_for_keys()
else
  search_for_wallet()
  search_for_keys()
end
{% endhighlight %}

In these cases, we are trying to grasp boolean logic, `if`-statments, and `else`-statements so I would:

1. Try to think of conditions that must either be `true` or `false` before something else can happen. For example, if I want to test out my understanding of the `&&` operator combined with an `if`-statement, I want to think of two things that must be `true` before another thing can happen.

2. Write little variables for both your conditions that must be `true` or `false`. Write little function calls for what happens next in the `if`-statements or `else`-statements (one-liners). Remember this is *psuedocode* so you don't need to implement function or variable behaviior, their names should indicate what they are.

3. Move from simple to complex boolean statments. Start from `==`, and `!=`, and move onto `&&`, `||` at a minimum.

We'll share a few of these round-robin at class start.